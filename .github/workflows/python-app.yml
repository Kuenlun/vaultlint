name: CI (Python)

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: read
  checks: write # let us publish JUnit to the Checks tab
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python (lint only)
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          check-latest: true
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg
      - name: Install lint deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install "flake8"    # pin if your project needs it, e.g. flake8==7.*
          if [ -f requirements-dev.txt ]; then python -m pip install -r requirements-dev.txt; fi
      - name: Lint with flake8
        shell: bash
        run: |
          python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    needs: lint
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        include:
          - os: ubuntu-latest
            python-version: "3.14" # allow failures on newest
            experimental: true
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg
      - name: Install test deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
      - name: Run tests
        shell: bash
        run: python -m pytest -q --junitxml=pytest-junit.xml
      - name: Publish test report
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: pytest-junit.xml
      - name: Upload diagnostics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            pytest-junit.xml
            .pytest_cache
          if-no-files-found: ignore
