[project]
name = "vaultlint"
dynamic = ["version"]
description = "A modular linter for Obsidian that validates Markdown, YAML front matter, and vault structure"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "PyYAML>=6.0.3",
    "rich>=14.2.0"
]

[project.scripts]
vaultlint = "vaultlint.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-timeout>=2.4.0",
    "black>=25.9.0",
    "isort>=7.0.0"
]

[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
version = {attr = "vaultlint.__version__"}

# Configuración de Black (formateo de código)
[tool.black]
line-length = 88
target-version = ["py310"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directorios que queremos excluir
    \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

# Configuración de isort (ordenamiento de imports)
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["vaultlint"]

# Configuración de pytest
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose"
]

# Configuración de coverage
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/test_*",
    "*/conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "LOG = logging.getLogger"
]
